import csv
with open('/Users/zameer/PycharmProjects/alloons/src/files/order.csv', 'rb') as csvfile:
    for row in csvfile:
        print ', '.join(row)


### convert time string to datetime object ####

import datetime
t = '2018-09-15 16:20:20 +0530'
date_ext = t[0:10]
date_obj = datetime.datetime.strptime(date_ext, '%Y-%m-%d')


#### readin the csv as dictionaries #####

import csv
with open('/Users/zameer/PycharmProjects/alloons/src/files/order.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(row['Email'])


##### script to get a sales by order number ####

from src.models.sales.sales import Sales
from src.common.database import Database
Database.initialize()

sales = Sales.get_sales_by_num('2696')
print(sales['subtotal'])


###### Server Deployment Notes #####


sudo mkdir /var/www/html/alloons
sudo chown iwoz:iwoz /var/www/html/alloons/

cd /var/www/html/alloons/



ssh-keygen
cat ~/.ssh/id_rsa.pub



git clone git@github.com:ziwoz/alloons.git .



git@github.com:ziwoz/alloons.git



cd /var/www/html/alloons
virtualenv --python=python3.5 venv
./venv/bin/pip install -r requirements.txt
./venv/bin/pip install uwsgi


sudo vi /etc/init/uwsgi_alloons.conf




####the init folder is not present#####if this is not working, put the file inside init.d/
###the init is no longer available in centos7, new is systemd####
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-centos-7#setting-up-the-uwsgi-application-server


description "uWSGI_alloons"
start on runlevel [2345]
stop on runlevel [06]
respawn
env UWSGI_ALIVE=/var/www/html/alloons/venv/bin/uwsgi
env LOGTO_ALIVE=/var/www/html/alloons/log/emperor.log
exec $UWSGI_ALIVE --master --emperor /var/www/html/alloons/uwsgi.ini --die-on-term --uid iwoz --gid iwoz --logto $LOGTO_ALIVE

cd /var/www/html/alloons/
vi uwsgi.ini

[uwsgi]
#application's base folder
base = /var/www/html/alloons
#python module to import
app = src.app
module = %(app)
home = %(base)/venv
pythonpath = %(base)
#socket file's location
socket = /var/www/html/alloons/socket.sock
#permissions for the socket file
chmod-socket = 777
#add more processes
processes = 8
#add more threads
threads = 8
#kill worker if timeout > 15 seconds
harakiri = 15
#the variable that holds a flask application inside the module imported at line 6
callable = app
#location of log files
logto = /var/www/html/alloons/log/%n.log

sudo service nginx start
sudo stop uwsgi_alloons
sudo start uwsgi_alloons
sudo setenforce 0



####### User Create Manual #####

export PYTHONPATH=/var/www/html/alloons/
python3.5
from src.common.database import Database
from src.models.users.users import User
Database.initialize()

User.register_user('zameer', 'test123', 'choma', 'admin')
User.register_user('bob', 'test123', 'boby', 'guest')
User.register_user('tony', 'test123', 'toner', 'user')
User.register_user('woz', 'test123', 'iwoz', 'admin')
User.register_user('choma', 'test123', 'iwoz', 'super_user')


#### add a new s no #####


from src.models.expense.expense import Expense
from src.common.database import Database
Database.initialize()

s_list = Expense.set_sno()

#### uploading the shopify ###

my_str = '''name, email, financial_status, paid_at, fulfillment_status, fulfilled_at, accepts_marketing,
                 currency, subtotal, shipping, taxes, total, discount_code, discount_amount, shipping_method,
                 created_at, lineitem_quantity, lineitem_name, lineitem_price, lineitem_compare_at_price, lineitem_sku,
                 lineitem_requires_shipping, lineitem_taxable, lineitem_fulfillment_status, billing_name,
                 billing_street, billing_address, billing_address2, billing_company, billing_city, billing_zip,
                 billing_province, billing_country, billing_phone, shipping_name, shipping_street, shipping_address1,
                 shipping_address2, shipping_company, shipping_city, shipping_zip, shipping_province,
                 shipping_country, shipping_phone, notes, note_attributes, cancelled_at, payment_method,
                 payment_reference, refunded_amount, vendor, id, tags, risk_level, source, lineitem_discount,
                 tax_1_name, tax_1_value, tax_2_name, tax_2_value, tax_3_name, tax_3_value, tax_4_name, tax_4_value,
                 tax_5_name, tax_5_value, phone, _id'''

shop_list = ['Name', 'Email', 'Financial Status', 'Paid at', 'Fulfillment Status', 'Fulfilled at', 'Accepts Marketing', 'Currency', 'Subtotal', 'Shipping', 'Taxes', 'Total', 'Discount Code', 'Discount Amount', 'Shipping Method', 'Created at', 'Lineitem quantity', 'Lineitem name', 'Lineitem price', 'Lineitem compare at price', 'Lineitem sku', 'Lineitem requires shipping', 'Lineitem taxable', 'Lineitem fulfillment status', 'Billing Name', 'Billing Street', 'Billing Address1', 'Billing Address2', 'Billing Company', 'Billing City', 'Billing Zip', 'Billing Province', 'Billing Country', 'Billing Phone', 'Shipping Name', 'Shipping Street', 'Shipping Address1', 'Shipping Address2', 'Shipping Company', 'Shipping City', 'Shipping Zip', 'Shipping Province', 'Shipping Country', 'Shipping Phone', 'Notes', 'Note Attributes', 'Cancelled at', 'Payment Method', 'Payment Reference', 'Refunded Amount', 'Vendor', 'Id', 'Tags', 'Risk Level', 'Source', 'Lineitem discount', 'Tax 1 Name', 'Tax 1 Value', 'Tax 2 Name', 'Tax 2 Value', 'Tax 3 Name', 'Tax 3 Value', 'Tax 4 Name', 'Tax 4 Value', 'Tax 5 Name', 'Tax 5 Value', 'Phone', '_id']

list1 = my_str.split(',')
list1 = [x.strip('\n') for x in list1]
list1 = [x.strip() for x in list1]

shop_list = ['Name', 'Email', 'Financial Status', 'Paid at', 'Fulfillment Status', 'Fulfilled at', 'Accepts Marketing', 'Currency', 'Subtotal', 'Shipping', 'Taxes', 'Total', 'Discount Code', 'Discount Amount', 'Shipping Method', 'Created at', 'Lineitem quantity', 'Lineitem name', 'Lineitem price', 'Lineitem compare at price', 'Lineitem sku', 'Lineitem requires shipping', 'Lineitem taxable', 'Lineitem fulfillment status', 'Billing Name', 'Billing Street', 'Billing Address1', 'Billing Address2', 'Billing Company', 'Billing City', 'Billing Zip', 'Billing Province', 'Billing Country', 'Billing Phone', 'Shipping Name', 'Shipping Street', 'Shipping Address1', 'Shipping Address2', 'Shipping Company', 'Shipping City', 'Shipping Zip', 'Shipping Province', 'Shipping Country', 'Shipping Phone', 'Notes', 'Note Attributes', 'Cancelled at', 'Payment Method', 'Payment Reference', 'Refunded Amount', 'Vendor', 'Id', 'Tags', 'Risk Level', 'Source', 'Lineitem discount', 'Tax 1 Name', 'Tax 1 Value', 'Tax 2 Name', 'Tax 2 Value', 'Tax 3 Name', 'Tax 3 Value', 'Tax 4 Name', 'Tax 4 Value', 'Tax 5 Name', 'Tax 5 Value', 'Phone']

st = ''
for i in shop_list:
	st += f"row['{i}'],"


##### Total For an investor #####

sku_list = ['GLJ0GZAM-092018' , 'GLJOGZM0918', 'WGJOGZM0918']

from src.common.database import Database
Database.initialize()

from src.models.shopify_order.shopify_order import Shopifyorder
tot_list = Shopifyorder.get_by_sku_list(sku_list)

tot_sum = 0
tot_qty = 0
for i in tot_list:
	if i.financial_status == 'paid' and i.fulfillment_status == 'fulfilled' and not i.tags:
		sum = i.lineitem_price * i.lineitem_quantity
		tot_sum += sum
		tot_qty += i.lineitem_quantity

print(f'Total Sum is {tot_sum}')
print(f'Total quantity sold is {tot_qty}')

##### Testing the Expense in the week ####

from src.common.database import Database
Database.initialize()
from src.models.expense.expense import Expense
#this_month = Expense.get_exp_predefined('this_month')
this_month = Expense.get_exp_amount_for_interval('this_month')
last_month = Expense.get_exp_amount_for_interval('last_month')

#### Converting Previous entries in Alloons ####


export PYTHONPATH=/var/www/html/alloons
/var/www/html/alloons/venv/bin/python3
from src.common.database import Database
Database.initialize()
from datetime import datetime
from src.models.expense.expense import Expense
all_expense = Expense.get_all_expense()
for expense in all_expense:
    if isinstance(expense.date, str):
        expense.date = datetime.strptime(expense.date, '%Y-%m-%d')
        expense.save_to_mongo()
    if isinstance(expense.amount, str):
        print('Danger')












